####################  Ora2Pg Configuration file   #####################

# Support for including common config file that may containt any
# of the following configuration directives.
#IMPORT	common.conf
IMPORT	ora2pg.conf

# Support for turning off certain schema features in the postgres side
# during schema export. Values can be : fkeys, pkeys, ukeys, indices, checks
# separated by a space character.
# fkeys		: turn off foreign key constraints
# pkeys		: turn off primary keys
# ukeys		: turn off unique column constraints
# indices	: turn off all other index types
# checks	: turn off check constraints
#SKIP	fkeys pkeys ukeys indices checks


# Trace all to stderr
DEBUG		1

# Export Oracle schema to PostgreSQL schema
#EXPORT_SCHEMA	1

# Type of export. Values can be the following keyword:
#	TABLE		Export tables
#	PACKAGE		Export packages
#	DATA		Export datas from table as INSERT statement
#	COPY		Export datas from table as COPY statement
#	VIEW		Export views
#	GRANT		Export grants
#	SEQUENCE	Export sequences
#	TRIGGER		Export triggers
#	FUNCTION	Export functions
#	PROCEDURE	Export procedures
#	TABLESPACE	Export tablespace (PostgreSQL >= 8 only)
TYPE		TABLE

# Set which table to export from. By default export from all tables.
# Additionally the extraction will respect the table list order given
# here. This is usefull if you have lots of foreign key constraints.
# Value must be a list of table name separated by space.
#TABLES		TABLE_TEST

# Set which table to exclude from extraction process. By default none.
# Value must be a list of table name separated by space.
#EXCLUDE		OTHER_TABLES
EXCLUDE		CREATE$JAVA$LOB$TABLE JAVA$CLASS$MD5$TABLE

# Display table indice and exit program (do not perform any export)
SHOWTABLEID	0

# Extract begin at table with indice number 3. You should use SHOWTABLEID
# before to know the corresponding table ids.
MIN		0

# Extract ended at table with indice number 5
MAX		0

# Extract data by dump of 1000 tuples. A value of 0 mean no limit
# so be sure to have enougth memory if you have billion of rows.
DATA_LIMIT	0

# You may wish to just extract data from some fields, the following directives will help
# you to do that. Works only with TYPE = DATA or COPY
# Modify output from the following tables(fields separate by space or comma)
#MODIFY_STRUCT	TABLE_TEST(dico,dossier)

# You may wish to change table names during data extraction, especally for replication use.
# Give a liste of tables separate by space as follow. Works only with TYPE = DATA or COPY
# REPLACE_TABLES	ORIG_TABLE_NAME1:NEW_TABLE_NAME1 ORIG_TABLE_NAME2:NEW_TABLE_NAME2 
#REPLACE_TABLES	TABLE_TEST:TABLE_PROD T_INFO:T_INFORMATION

# You may wish to change column names during data extraction, especally for replication use.
# Give a liste of tables and columns separate by space as follow. Works only with TYPE = DATA or COPY
# REPLACE_COLS	ORIG_TABLE_NAME(ORIG_COL_NAME1:NEW_COL_NAME1,ORIG_COL_NAME2:NEW_COL_NAME2)
#REPLACE_COLS	TABLE_TEST(dico:dictionary,dossier:folder)

# Define the following directive to send export directly to a PostgreSQL database
# This will disable file output.
#PG_DSN		dbi:Pg:dbname=test_db;host=localhost;port=5432
#PG_USER		test
#PG_PWD		test

# By default all object names are converted to lower case, if you
# want to preserve Oracle object name asis set this to 1. Not recommanded
# unless you always quote all tables and columns on all your scripts.
#CASE_SENSITIVE	0

# Support for include a WHERE clause filter when dumping the contents
# of tables. Value is construct as follow: TABLE_NAME[WHERE_CLAUSE], or
# if you have only one where clause for each table just put the where
# clause as value. Both are possible too. Here are some examples:
#WHERE  1=1	# Apply to all tables
#WHERE	TABLE_TEST[ID1='001']	# Apply only on table TABLE_TEST
#WHERE	TABLE_TEST[ID1='001' AND ID1='002] DATE_CREATE > '2001-01-01' TABLE_INFO[NAME='test']
# The last applies two different where clause on tables TABLE_TEST and TABLE_INFO and
# a generic where clause on DATE_CREATE to all other tables

# By default all output is dump to STDOUT if not send directly to postgresql
# database (see above). Give a filename to save export to it. If you want
# a Gzipped compressed file just add the extension .gz to the filename, you
# need perl module Compress::Zlib from CPAN. Add extension .bz2 to use Bzip2
# compression
#OUTPUT		output.sql.gz
#OUTPUT		output.sql.bz2
OUTPUT		output_constraints.sql

# Path to the bzip2 program. See OUTPUT directive above.
BZIP2	/usr/bin/bzip2

# Set this to 1 if you connect as simple user and can not extract things
# from the DBA_... tables. It will use tables ALL_... This will not works
# with GRANT export.
USER_GRANTS     0

# Set this to 1 to replace default password for all extracted user
# during GRANT export
GEN_USER_PWD	0

# When exporting tables, Ora2Pg normally exports constraints as they are;
# if they are non-deferrable they are exported as non-deferrable.
# However, non-deferrable constraints will probably cause problems when
# attempting to import data to PostgreSQL. The following option set to 1
# will cause all foreign key constraints to be exported as deferrable
FKEY_DEFERRABLE	0

# In addition, when exporting data will the following option set to 1
# add a command to defer all foreign key constraints during data export.
# Constraints will be checked at the end of each transaction.
DEFER_FKEY	0

# If set to 1 replace portable numeric type into PostgreSQL internal type.
# Oracle data type NUMBER(p,s) is approximatively converted to smallint,
# integer, bigint, real and float PostgreSQL data type. If you have monetary
# fields you should preserve the numeric(p,s) PostgreSQL data type if you need
# very good precision. NUMBER without precision are set to float.
PG_NUMERIC_TYPE	1

# NUMBER(x) are converted by default to float if PG_NUMERIC_TYPE is true.
# You can overwrite this value to any PG type, like interger or bigint.
# DEFAULT_NUMERIC float
DEFAULT_NUMERIC numeric

# By default, primary key names in the source database are ignored, and
# default key names are created in the target database. If this is set to true,
# primary key names are kept.
KEEP_PKEY_NAMES 1

# If set to 1, all IN, OUT or INOUT parameters are passed to the generated
# PostgreSQL function declarations. Please note that things like default 
# parameters aren't supported by PostgreSQL and are not exported for now.
PG_SUPPORTS_INOUT 0

# If set to 1, use PostgreSQL Role support
PG_SUPPORTS_ROLE 0

# Disables triggers on all tables in COPY or DATA mode. Available modes 
# are USER (userdefined triggers) and ALL (includes RI system 
# triggers). Set to 0 if you don't want to disable triggers during
# data migration.
DISABLE_TABLE_TRIGGERS 0

